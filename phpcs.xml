<?xml version="1.0"?>
<ruleset name="PhpUnitConversion">

    <description>A basic coding standard.</description>

    <exclude-pattern>vendor/*</exclude-pattern>

    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>

    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <!-- Disabled for now
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    -->
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>

    <rule ref="PEAR.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>

    <rule ref="PSR1.Files.SideEffects.FoundWithSymbols">
        <severity>0</severity>
    </rule>

    <rule ref="PSR2"/>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>

    <rule ref="Zend.Files.ClosingTag"/>
    <rule ref="Generic.Files.LineEndings"/>
    <rule ref="Generic.Files.LineLength.TooLong">
        <severity>0</severity>
    </rule>

    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
        <severity>0</severity>
    </rule>

    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <rule ref="PEAR.NamingConventions.ValidClassName"/>

    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.Formatting.NoSpaceAfterCast"/>
    <!-- Disabled for now
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
    -->
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- Disabled for now as it was buggy, using own MemberVarSpacingSniff
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>
    -->

    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
</ruleset>
